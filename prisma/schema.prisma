// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int    @id @default(autoincrement())
  roleName  String
  users     User[]
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  roleId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      Role      @relation(fields: [roleId], references: [id])
  addresses Address[]
  orders    Order[]
  reviews   ProductReview[]
}

model Address {
  id           Int      @id @default(autoincrement())
  userId       Int
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders       Order[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Product {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  basePrice   Float
  categoryId  Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  category    Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  variations  ProductVariation[]
  images      ProductImage[]
  reviews     ProductReview[]
  orderItems  OrderItem[]
}

model ProductVariation {
  id            Int              @id @default(autoincrement())
  productId     Int
  name          String
  price         Float
  stock         Int              @default(0)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  product       Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  imageUrl  String
  imagePublicId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int      
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id               Int         @id @default(autoincrement())
  userId           Int
  total            Float
  status           String      @default("Pending")
  shippingAddressId Int
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingAddress  Address     @relation(fields: [shippingAddressId], references: [id], onDelete: Cascade)
  orderItems       OrderItem[]
  payments         Payment[]
}

model OrderItem {
  id          Int             @id @default(autoincrement())
  orderId     Int
  productId   Int
  variationId Int?
  quantity    Int
  price       Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  order       Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variation   ProductVariation? @relation(fields: [variationId], references: [id], onDelete: Cascade)
  returns     Return[]
}

model Payment {
  id              Int       @id @default(autoincrement())
  orderId         Int
  stripePaymentId String
  amount          Float
  currency        String
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  refunds         Refund[]
}

model Refund {
  id            Int       @id @default(autoincrement())
  paymentId     Int
  stripeRefundId String
  amount        Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  payment       Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model Return {
  id           Int       @id @default(autoincrement())
  orderItemId  Int
  reason       String
  status       String    @default("Pending")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  orderItem    OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
}