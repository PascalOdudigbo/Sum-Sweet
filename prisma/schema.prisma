// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  username      String          @unique
  email         String          @unique
  password      String
  roleId        Int
  active        Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          Role            @relation(fields: [roleId], references: [id])
  addresses     Address[]
  orders        Order[]
  reviews       ProductReview[]
  wishlist      Product[]       @relation("UserWishlist")
  stripeCustomerId String?
  cart          Cart?
}

model Role {
  id       Int    @id @default(autoincrement())
  name     String @unique
  users    User[]
}

model Address {
  id           Int      @id @default(autoincrement())
  userId       Int
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders       Order[]
}

model Category {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  image         String
  imagePublicId String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]
}

model Product {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  basePrice   Float
  categoryId  Int
  active      Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  category    Category          @relation(fields: [categoryId], references: [id])
  variations  ProductVariation[]
  images      ProductImage[]
  reviews     ProductReview[]
  orderItems  OrderItem[]
  discounts   DiscountProduct[]
  cartItems   CartItem[]
  wishlistedBy User[]           @relation("UserWishlist")
}

model ProductVariation {
  id        Int        @id @default(autoincrement())
  productId Int
  name      String
  price     Float
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  orderItems OrderItem[]
}

model ProductImage {
  id            Int      @id @default(autoincrement())
  productId     Int
  imageUrl      String
  imagePublicId String
  createdAt     DateTime @default(now())
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Discount {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  discountPercent Float
  validFrom       DateTime          @default(now())
  validUntil      DateTime
  imageUrl        String?
  imagePublicId   String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  products        DiscountProduct[]
}

model DiscountProduct {
  productId  Int
  discountId Int
  product    Product  @relation(fields: [productId], references: [id])
  discount   Discount @relation(fields: [discountId], references: [id])

  @@unique([productId, discountId])
  @@id([discountId, productId])
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id        Int         @id @default(autoincrement())
  userId    Int         @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id            Int               @id @default(autoincrement())
  cartId        Int
  productId     Int
  variationId   Int?
  quantity      Int
  customText    String?
  cart          Cart              @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product       Product           @relation(fields: [productId], references: [id])
  variation     ProductVariation? @relation(fields: [variationId], references: [id])

  @@unique([cartId, productId, variationId])
}

model Order {
  id                Int         @id @default(autoincrement())
  userId            Int
  total             Float
  status            String      @default("Pending")
  shippingAddressId Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingAddress   Address     @relation(fields: [shippingAddressId], references: [id])
  orderItems        OrderItem[]
  payment           Payment?
  refunds       Refund[]
}

model OrderItem {
  id          Int               @id @default(autoincrement())
  orderId     Int
  productId   Int
  variationId Int?
  quantity    Int
  price       Float
  customText  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  order       Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product           @relation(fields: [productId], references: [id])
  variation   ProductVariation? @relation(fields: [variationId], references: [id])
}

model Payment {
  id              Int      @id @default(autoincrement())
  orderId         Int      @unique
  stripePaymentId String
  amount          Float
  currency        String
  status          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Business {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  refundsPolicy String?
  phone       String
  email       String
  address     String
  socialLinks SocialMedia[]
}

model SocialMedia {
  id         Int      @id @default(autoincrement())
  businessId Int
  name       String
  url        String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

model Refund {
  id            Int      @id @default(autoincrement())
  orderId       Int
  order         Order    @relation(fields: [orderId], references: [id])
  amount        Float
  reason        String
  status        String   @default("Pending") // Pending, Approved, Rejected, Processed
  stripeRefundId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}